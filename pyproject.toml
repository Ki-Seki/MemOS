# Poetry related

[tool.poetry]
name = "MemoryOS"
version = "0.2.0"
description = "Intelligence Begins with Memory"
license = "Apache-2.0"
authors = ["MemTensor <lizy@memtensor.cn>"]
readme = "README.md"
repository = "https://github.com/MemTensor/MemOS"
keywords = ["memory", "llm", "language model", "memoryOS", "agent"]
packages = [{include = "memos", from = "src"}]

[tool.poetry.dependencies]

# Core dependencies. These should not be optional.
python = "^3.10"
openai = "^1.77.0"
ollama = "^0.4.8"
tenacity = "^9.1.2"  # Error handling and retrying library
transformers = "^4.51.3"
fastapi = {extras = ["all"], version = "^0.115.12"}
sqlalchemy = "^2.0.41"  # SQL toolkit

# GeneralTextualMemory dependencies
qdrant-client = {version = "^1.14.2", optional = true}  # Vector database

# TreeTextualMemory dependencies
neo4j = {version = "^5.28.1", optional = true}  # Graph database
schedule = {version = "^1.2.2", optional = true}  # Task scheduling library
scikit-learn = {version = "^1.7.0", optional = true}  # Machine learning library

# MemScheduler dependencies
redis = {version = "^6.2.0", optional = true}  # Key-value store
pika = {version = "^1.3.2", optional = true}  # RabbitMQ client for Python

[tool.poetry.extras]
general-mem = ["qdrant-client"]
tree-mem = ["neo4j", "schedule", "scikit-learn"]
mem-scheduler = ["redis", "pika"]
all = [
    "qdrant-client",
    "neo4j",
    "schedule",
    "scikit-learn",
    "redis",
    "pika",
]

[tool.poetry.group.dev]
optional = false

[tool.poetry.group.dev.dependencies]
# Core development dependencies
pre-commit = "^4.2.0"
ruff = "^0.11.8"

# Hard-to-avoid dependencies
torch = "^2.0.0"  # CPU-version of PyTorch, only used for testing

# Infrequently used dependencies
markitdown = {extras = ["docx", "pdf", "pptx", "xls", "xlsx"], version = "^0.1.1"}  # MarkItDown parser for various file formats
chonkie = "^1.0.7"  # Sentence chunking library
sentence-transformers = "^4.1.0"  # Text Embedding
volcengine-python-sdk = "^4.0.4"  # ByteDance's AI Service SDK (namely, Volcano Ark)

[tool.poetry.group.test]
optional = false

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.23.5"

[tool.poetry.group.eval]
optional = true

[tool.poetry.group.eval.dependencies]
dotenv = "^0.9.9"
mem0ai = "^0.1.109"
zep-cloud = "^2.15.0"
rouge-score = "^0.1.2"
nltk = "^3.9.1"
bert-score = "^0.3.13"
scipy = "^1.10.1"
python-dotenv = "^1.1.1"
langgraph = "^0.5.1"
langmem = "^0.0.27"

[tool.poetry.scripts]
memos = "memos.cli:main"

[[tool.poetry.source]]
name = "mirrors"
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"
priority = "supplemental"


# Building related

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# Testing related

[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = "src"
filterwarnings = [
    "ignore::DeprecationWarning:qdrant_client.*",
]


# Linting related

[tool.ruff]
fix = true
line-length = 100
target-version = "py310"

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
ignore = [
    "RUF001", # ambiguous-unicode-character-string
    "PGH003", # blanket-type-ignore
]

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2
